type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | AND
  | OR
  | XOR
  | FISZERO
  | FLESS
  | FISPOS
  | FISNEG
  | FNEG
  | FABS
  | FHALF
  | FSQR
  | FLOOR
  | FLOATOFINT
  | INTOFFLOAT
  | SQRT
  | COS
  | SIN
  | TAN
  | ATAN
  | READINT
  | READFLOAT
  | PRINTCHAR

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())

let start_pos = Parsing.symbol_start_pos ()
let letfloat x e1 e2 = 0,Let((x, Type.Int), e1, e2)
let letint x e1 e2 = 0,Let((x, Type.Int), e1,e2)
let letrec ident formal_args body e = 
0, LetRec({name = addtyp ident; args = List.map addtyp formal_args; body = body},e)
let lettuple p e1 e2 = 0, LetTuple(List.map addtyp p, e1, e2)
let (&!) e n = 0,AndI(e,n)
let var x = 0,Var x
let int n = 0,Int n
let iff e1 e2 e3 = 0,If(e1,e2,e3)
let nott e = 0,Not(e)
let fneg e = 0,FNeg(e)
let (&&!) e1 e2  = 0,And(e1,e2)
let fless e1 e2 = 0,FLT(e1,e2)
let float f = 0,Float f
let ftoi e = 0,FtoI e
let itof e = 0,ItoF e
let app f e = 0,App(f,e)
let tuple e = 0,Tuple(e)
let (+!) e1 e2 = 0,FAdd(e1,e2)
let (-!) e1 e2 = 0,FSub(e1,e2)
let ( *!) e1 e2 = 0,FMul(e1,e2)
let (/!) e1 e2 = 0,FDiv(e1,e2) 

let start = Parsing.symbol_start_pos ()

let pi = float 3.1415927
let pi' = 3.1415927
let pi_div e x = 
iff ((nott (fless e (float 0.))) &&! (fless e ((float 2.) *! pi))) e @@
iff ((fless e (float 0.)) &&! (nott(fless x (fneg e)))) (app (var "pi_div") [(e +! x); (x /! (float 2.))]) @@
iff (((fless (float 0.) e)) &&! (nott (fless x e))) (app (var "pi_div") [(e-!(x/!(float 2.)));(x/!(float 2.))]) @@
(app (var "pi_div") [e;(x*!(float 2.))])

let pi4div x = 
iff (fless x (pi/!float(2.))) (tuple [x;(float 1.)]) @@
iff (fless x pi) (tuple [pi-!x;float (-1.)]) @@
iff (fless x (pi*!float(1.5))) (tuple[x-!pi;float (-1.)]) @@
tuple [(pi*!float(2.))-!x;float 1.]
   
let tailor_cos e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t2" (var "xx" /! float 2.) @@
  letfloat "t4" (var "t2" *! var "xx" /! float 12.) @@
  letfloat "t6" (var "t4" *! var "xx" /! float 30.) @@
  letfloat "t8" (var "t6" *! var "xx" /! float 56.) @@
  letfloat "t10" (var "t8" *! var "xx" /! float 90.) @@
  float 1. -! var "t2" +! var "t4" -! var "t6" +! var "t8" -! var "t10"

let cos e = 
letrec "pi_div" ["e";"x"] (pi_div (var "e") (var "x")) @@
letrec "pi4div" ["x"] (pi4div (var "x")) @@
letrec "tailor_cos" ["e"] (tailor_cos (var "e")) @@
lettuple ["a";"b"] (app (var "pi4div") [(app (var "pi_div") [e;pi*!float(2.)])]) @@
(var "b") *! (app (var "tailor") [var "a"])

let sin e =
  letfloat "x" e @@
  letint "n" (ftoi (var "x" /! pi)) @@
  (float 1. -! itof (var "n" &! 1) *! float 2.) *!
    cos (var "x" -! itof (var "n") *! pi -! pi /! float 2.)

let tan e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t3" (var "x" *! var "xx" /! float 3.) @@
  letfloat "t5" (var "t3" *! var "xx" *! (float 2. /! float 5.)) @@
  letfloat "t7" (var "t5" *! var "xx" *! (float 17. /! float 42.)) @@
  letfloat "t9" (var "t7" *! var "xx" *! (float 62. /! float 153.)) @@
  var "x" +! var "t3" +! var "t5" +! var "t7" +! var "t9"

let atan e =
  letfloat "x" e @@
  letfloat "t1" ((var "x" -! float 2.) /! float 5.) @@
  letfloat "t2" ((var "t1" *! var "t1" *! float 2.)) @@
  letfloat "t3" ((var "t2" *! var "t1" *! (float 11. /! float 6.))) @@
  letfloat "t4" ((var "t3" *! var "t1" *! (float 18. /! float 11.))) @@
  letfloat "t5" ((var "t4" *! var "t1" *! (float 41. /! float 30.))) @@
  float 1.10714872 +! var "t1" -! var "t2" +! var "t3" -! var "t4" +! var "t5"

let xor x y = 
Or((0,And(x,(0,Not(y)))),(0,And((0,(Not(x))),y)))
# 147 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MINUS_DOT *);
  264 (* PLUS_DOT *);
  265 (* AST_DOT *);
  266 (* SLASH_DOT *);
  267 (* EQUAL *);
  268 (* LESS_GREATER *);
  269 (* LESS_EQUAL *);
  270 (* GREATER_EQUAL *);
  271 (* LESS *);
  272 (* GREATER *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
  279 (* REC *);
  280 (* COMMA *);
  281 (* ARRAY_CREATE *);
  282 (* DOT *);
  283 (* LESS_MINUS *);
  284 (* SEMICOLON *);
  285 (* LPAREN *);
  286 (* RPAREN *);
    0 (* EOF *);
  287 (* AND *);
  288 (* OR *);
  289 (* XOR *);
  290 (* FISZERO *);
  291 (* FLESS *);
  292 (* FISPOS *);
  293 (* FISNEG *);
  294 (* FNEG *);
  295 (* FABS *);
  296 (* FHALF *);
  297 (* FSQR *);
  298 (* FLOOR *);
  299 (* FLOATOFINT *);
  300 (* INTOFFLOAT *);
  301 (* SQRT *);
  302 (* COS *);
  303 (* SIN *);
  304 (* TAN *);
  305 (* ATAN *);
  306 (* READINT *);
  307 (* READFLOAT *);
  308 (* PRINTCHAR *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  276 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\007\000\
\007\000\004\000\004\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\006\000\005\000\002\000\
\001\000\008\000\007\000\003\000\003\000\001\000\004\000\002\000\
\001\000\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\054\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\000\000\000\000\063\000\062\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\034\000\035\000\090\000\084\000\036\000\092\000\120\000"

let yysindex = "\255\255\
\251\004\000\000\000\000\000\000\000\000\000\000\096\255\251\004\
\251\004\251\004\000\000\251\254\096\255\002\255\096\255\096\255\
\096\255\096\255\096\255\096\255\096\255\096\255\096\255\096\255\
\096\255\096\255\096\255\096\255\096\255\096\255\096\255\096\255\
\096\255\183\005\083\255\249\254\243\254\245\254\245\254\180\255\
\014\255\006\255\008\255\093\255\000\000\215\255\093\255\243\254\
\093\255\243\254\243\254\243\254\243\254\243\254\243\254\243\254\
\243\254\243\254\243\254\243\254\243\254\243\254\243\254\243\254\
\243\254\251\004\251\004\251\004\251\004\251\004\251\004\251\004\
\251\004\251\004\251\004\251\004\251\004\251\004\251\004\251\004\
\251\004\000\255\243\254\096\255\251\004\001\255\251\004\251\004\
\030\255\012\255\031\255\240\254\243\254\000\000\243\254\243\254\
\095\255\095\255\095\255\095\255\245\254\245\254\099\001\099\001\
\099\001\099\001\099\001\099\001\239\005\183\005\183\005\183\005\
\251\004\243\254\239\005\251\004\043\005\071\005\030\255\045\255\
\251\004\037\255\038\255\048\255\099\005\127\005\251\004\251\004\
\000\000\251\004\183\005\000\000\000\000\251\004\033\255\000\000\
\211\005\183\005\183\005\155\005\251\004\251\004\211\005\183\005"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\093\000\011\003\121\000\039\003\071\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\149\000\
\000\000\177\000\205\000\233\000\005\001\037\001\069\001\110\001\
\138\001\166\001\194\001\222\001\250\001\022\002\054\002\086\002\
\114\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\155\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\183\002\000\000\211\002\239\002\
\157\003\184\003\210\003\236\003\103\003\131\003\000\004\028\004\
\056\004\088\004\120\004\148\004\035\004\075\004\107\004\135\004\
\000\000\065\000\166\004\000\000\000\000\000\000\051\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\207\004\000\000\000\000\000\000\001\000\000\000\
\180\004\209\004\041\255\000\000\000\000\000\000\193\004\227\004"

let yygindex = "\000\000\
\002\000\135\000\000\000\000\000\000\000\000\000\201\255"

let yytablesize = 1807
let yytable = "\001\000\
\007\000\003\000\004\000\005\000\006\000\007\000\008\000\123\000\
\009\000\038\000\039\000\040\000\086\000\124\000\041\000\046\000\
\085\000\042\000\010\000\080\000\081\000\011\000\012\000\043\000\
\088\000\089\000\013\000\091\000\113\000\116\000\014\000\045\000\
\059\000\121\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\119\000\030\000\031\000\032\000\033\000\122\000\130\000\
\132\000\133\000\134\000\141\000\064\000\057\000\055\000\129\000\
\058\000\000\000\000\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\004\000\005\000\006\000\115\000\000\000\
\117\000\118\000\000\000\000\000\008\000\004\000\005\000\006\000\
\004\000\005\000\006\000\000\000\000\000\000\000\011\000\070\000\
\071\000\000\000\000\000\000\000\082\000\000\000\000\000\014\000\
\011\000\000\000\125\000\011\000\000\000\126\000\086\000\000\000\
\009\000\014\000\131\000\000\000\014\000\080\000\081\000\000\000\
\137\000\138\000\000\000\139\000\000\000\000\000\000\000\140\000\
\000\000\000\000\000\000\000\000\000\000\037\000\143\000\144\000\
\000\000\000\000\000\000\044\000\028\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\000\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\093\000\000\000\000\000\095\000\000\000\096\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\000\000\087\000\000\000\000\000\
\000\000\000\000\000\000\078\000\031\000\000\000\000\000\079\000\
\000\000\000\000\080\000\081\000\000\000\000\000\000\000\000\000\
\000\000\000\000\114\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\079\000\000\000\094\000\080\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\035\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\000\000\007\000\007\000\007\000\000\000\007\000\000\000\
\007\000\000\000\007\000\000\000\007\000\007\000\007\000\007\000\
\007\000\059\000\059\000\059\000\033\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\000\000\059\000\059\000\059\000\000\000\059\000\000\000\
\059\000\000\000\000\000\000\000\059\000\059\000\059\000\059\000\
\059\000\058\000\058\000\058\000\034\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\000\000\058\000\058\000\058\000\000\000\058\000\000\000\
\058\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\036\000\008\000\008\000\
\000\000\000\000\008\000\000\000\008\000\000\000\000\000\000\000\
\008\000\000\000\008\000\008\000\008\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\037\000\009\000\009\000\000\000\000\000\009\000\000\000\
\009\000\000\000\000\000\000\000\009\000\000\000\009\000\009\000\
\009\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\038\000\028\000\028\000\
\000\000\000\000\028\000\000\000\028\000\000\000\000\000\000\000\
\028\000\000\000\028\000\028\000\028\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\039\000\030\000\030\000\000\000\000\000\030\000\000\000\
\030\000\000\000\000\000\000\000\030\000\000\000\030\000\030\000\
\030\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\040\000\031\000\031\000\
\000\000\000\000\031\000\000\000\031\000\000\000\000\000\000\000\
\031\000\000\000\031\000\031\000\031\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\041\000\032\000\032\000\000\000\000\000\032\000\000\000\
\032\000\000\000\000\000\000\000\032\000\000\000\032\000\032\000\
\032\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\042\000\035\000\035\000\
\000\000\000\000\035\000\000\000\035\000\000\000\000\000\000\000\
\035\000\000\000\035\000\035\000\035\000\000\000\000\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\043\000\033\000\033\000\
\000\000\000\000\033\000\000\000\033\000\000\000\000\000\000\000\
\033\000\000\000\033\000\033\000\033\000\000\000\000\000\000\000\
\000\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\044\000\034\000\034\000\
\000\000\000\000\034\000\000\000\034\000\000\000\000\000\000\000\
\034\000\000\000\034\000\034\000\034\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\071\000\000\000\000\000\000\000\
\000\000\045\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\000\000\036\000\
\036\000\080\000\081\000\036\000\000\000\036\000\000\000\000\000\
\000\000\036\000\000\000\036\000\036\000\036\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\048\000\037\000\037\000\000\000\000\000\037\000\
\000\000\037\000\000\000\000\000\000\000\037\000\000\000\037\000\
\037\000\037\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\053\000\038\000\
\038\000\000\000\000\000\038\000\000\000\038\000\000\000\000\000\
\000\000\038\000\000\000\038\000\038\000\038\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\027\000\039\000\039\000\000\000\000\000\039\000\
\000\000\039\000\000\000\000\000\000\000\039\000\000\000\039\000\
\039\000\039\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\029\000\040\000\
\040\000\000\000\000\000\040\000\000\000\040\000\000\000\000\000\
\000\000\040\000\000\000\040\000\040\000\040\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\049\000\041\000\041\000\000\000\000\000\041\000\
\000\000\041\000\000\000\000\000\000\000\041\000\000\000\041\000\
\041\000\041\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\010\000\042\000\
\042\000\000\000\000\000\042\000\000\000\042\000\000\000\000\000\
\000\000\042\000\000\000\042\000\042\000\042\000\000\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\020\000\043\000\
\043\000\000\000\000\000\043\000\000\000\043\000\000\000\000\000\
\000\000\043\000\000\000\043\000\043\000\043\000\000\000\000\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\023\000\044\000\
\044\000\000\000\000\000\044\000\000\000\044\000\000\000\000\000\
\000\000\044\000\000\000\044\000\044\000\044\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\024\000\045\000\045\000\000\000\000\000\045\000\
\000\000\045\000\000\000\000\000\000\000\045\000\000\000\045\000\
\045\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\048\000\048\000\000\000\000\000\
\048\000\000\000\048\000\000\000\000\000\000\000\048\000\011\000\
\048\000\048\000\048\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\000\000\
\053\000\053\000\000\000\000\000\053\000\000\000\053\000\000\000\
\000\000\022\000\053\000\000\000\053\000\053\000\053\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\027\000\027\000\000\000\000\000\
\027\000\000\000\027\000\021\000\000\000\000\000\027\000\000\000\
\027\000\027\000\027\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\013\000\
\029\000\029\000\000\000\000\000\029\000\000\000\029\000\000\000\
\000\000\000\000\029\000\000\000\029\000\029\000\029\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\014\000\049\000\049\000\000\000\000\000\
\049\000\000\000\061\000\000\000\000\000\000\000\049\000\000\000\
\049\000\049\000\049\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\017\000\
\010\000\010\000\000\000\000\000\010\000\000\000\010\000\000\000\
\000\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\052\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\018\000\
\020\000\020\000\000\000\000\000\020\000\000\000\020\000\000\000\
\000\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\025\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\015\000\
\023\000\023\000\000\000\000\000\023\000\000\000\023\000\000\000\
\000\000\000\000\023\000\000\000\023\000\000\000\026\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\016\000\024\000\024\000\000\000\000\000\
\024\000\000\000\024\000\000\000\000\000\000\000\024\000\000\000\
\024\000\012\000\012\000\012\000\012\000\060\000\000\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000\012\000\012\000\
\000\000\000\000\012\000\019\000\012\000\000\000\000\000\000\000\
\012\000\000\000\012\000\000\000\011\000\011\000\011\000\011\000\
\051\000\000\000\011\000\011\000\011\000\011\000\011\000\011\000\
\000\000\011\000\011\000\000\000\000\000\011\000\047\000\011\000\
\046\000\000\000\000\000\011\000\000\000\011\000\022\000\022\000\
\022\000\022\000\000\000\000\000\022\000\022\000\022\000\022\000\
\022\000\022\000\050\000\022\000\022\000\000\000\000\000\022\000\
\000\000\022\000\000\000\000\000\000\000\022\000\000\000\022\000\
\021\000\021\000\021\000\021\000\000\000\000\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\000\000\
\000\000\021\000\000\000\021\000\000\000\000\000\000\000\021\000\
\000\000\021\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\013\000\013\000\000\000\000\000\013\000\000\000\013\000\
\000\000\000\000\000\000\013\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\014\000\014\000\000\000\
\000\000\014\000\000\000\014\000\061\000\061\000\000\000\014\000\
\061\000\014\000\061\000\000\000\000\000\000\000\061\000\000\000\
\061\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\000\000\017\000\017\000\000\000\000\000\017\000\000\000\017\000\
\000\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\052\000\000\000\000\000\
\052\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
\052\000\018\000\018\000\000\000\000\000\018\000\000\000\018\000\
\000\000\000\000\000\000\018\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\025\000\000\000\000\000\
\025\000\000\000\015\000\015\000\015\000\015\000\015\000\015\000\
\025\000\015\000\015\000\000\000\000\000\015\000\000\000\015\000\
\000\000\000\000\000\000\015\000\000\000\015\000\000\000\000\000\
\026\000\026\000\000\000\000\000\026\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\026\000\016\000\016\000\000\000\
\000\000\016\000\000\000\016\000\000\000\000\000\000\000\016\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\060\000\
\060\000\000\000\000\000\060\000\000\000\060\000\000\000\000\000\
\000\000\060\000\000\000\060\000\000\000\019\000\019\000\000\000\
\000\000\019\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\019\000\051\000\051\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\051\000\000\000\
\047\000\047\000\046\000\046\000\047\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\000\000\000\000\
\050\000\000\000\003\000\004\000\005\000\006\000\007\000\008\000\
\050\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\011\000\012\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\
\000\000\000\000\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\000\000\030\000\031\000\032\000\033\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\127\000\000\000\000\000\
\000\000\000\000\078\000\000\000\000\000\000\000\079\000\000\000\
\000\000\080\000\081\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\000\000\000\000\000\000\000\000\128\000\000\000\078\000\000\000\
\000\000\000\000\079\000\000\000\000\000\080\000\081\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\000\000\000\000\000\000\079\000\000\000\
\135\000\080\000\081\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\079\000\000\000\136\000\080\000\081\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\000\000\000\000\000\000\
\142\000\000\000\078\000\000\000\000\000\000\000\079\000\000\000\
\000\000\080\000\081\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
\000\000\000\000\079\000\000\000\000\000\080\000\081\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\080\000\081\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\080\000\081\000"

let yycheck = "\001\000\
\000\000\000\001\001\001\002\001\003\001\004\001\005\001\024\001\
\007\001\008\000\009\000\010\000\026\001\030\001\020\001\014\000\
\024\001\023\001\017\001\031\001\032\001\020\001\021\001\029\001\
\011\001\020\001\025\001\020\001\029\001\029\001\029\001\030\001\
\000\000\022\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\020\001\049\001\050\001\051\001\052\001\024\001\011\001\
\020\001\020\001\011\001\027\001\000\000\011\001\022\001\119\000\
\000\000\255\255\255\255\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\001\001\002\001\003\001\085\000\255\255\
\087\000\088\000\255\255\255\255\000\000\001\001\002\001\003\001\
\001\001\002\001\003\001\255\255\255\255\255\255\020\001\009\001\
\010\001\255\255\255\255\255\255\026\001\255\255\255\255\029\001\
\020\001\255\255\113\000\020\001\255\255\116\000\026\001\255\255\
\000\000\029\001\121\000\255\255\029\001\031\001\032\001\255\255\
\127\000\128\000\255\255\130\000\255\255\255\255\255\255\134\000\
\255\255\255\255\255\255\255\255\255\255\007\000\141\000\142\000\
\255\255\255\255\255\255\013\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\255\255\035\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\044\000\255\255\255\255\047\000\255\255\049\000\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\000\000\255\255\255\255\028\001\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\084\000\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\255\255\
\024\001\255\255\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\019\001\020\001\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\000\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\031\001\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\000\000\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\028\001\255\255\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\000\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\031\001\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\000\000\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\028\001\255\255\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\000\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\031\001\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\000\000\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\028\001\255\255\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\000\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\000\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\000\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\031\001\032\001\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\000\000\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\019\001\031\001\032\001\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\030\001\031\001\032\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\000\000\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\030\001\
\031\001\032\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\000\000\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\030\001\031\001\032\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\000\000\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\030\001\
\031\001\032\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\000\000\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\030\001\031\001\032\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\000\000\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\030\001\
\031\001\032\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\000\000\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\000\000\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\000\000\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\030\001\031\001\032\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\000\000\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\022\001\255\255\024\001\255\255\255\255\255\255\028\001\000\000\
\030\001\031\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\000\000\028\001\255\255\030\001\031\001\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\022\001\255\255\024\001\000\000\255\255\255\255\028\001\255\255\
\030\001\031\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\000\000\
\018\001\019\001\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\030\001\031\001\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\000\000\018\001\019\001\255\255\255\255\
\022\001\255\255\000\000\255\255\255\255\255\255\028\001\255\255\
\030\001\031\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\000\000\
\018\001\019\001\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\000\000\
\018\001\019\001\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\000\000\
\018\001\019\001\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\030\001\255\255\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\000\000\018\001\019\001\255\255\255\255\
\022\001\255\255\024\001\255\255\255\255\255\255\028\001\255\255\
\030\001\005\001\006\001\007\001\008\001\000\000\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\022\001\000\000\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\255\255\005\001\006\001\007\001\008\001\
\000\000\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\022\001\000\000\024\001\
\000\000\255\255\255\255\028\001\255\255\030\001\005\001\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\000\000\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\030\001\
\005\001\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\022\001\255\255\024\001\255\255\255\255\255\255\028\001\
\255\255\030\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\022\001\255\255\024\001\
\255\255\255\255\255\255\028\001\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\022\001\255\255\024\001\018\001\019\001\255\255\028\001\
\022\001\030\001\024\001\255\255\255\255\255\255\028\001\255\255\
\030\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\022\001\255\255\024\001\
\255\255\255\255\255\255\028\001\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\022\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\030\001\018\001\019\001\255\255\255\255\022\001\255\255\024\001\
\255\255\255\255\255\255\028\001\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\022\001\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\030\001\018\001\019\001\255\255\255\255\022\001\255\255\024\001\
\255\255\255\255\255\255\028\001\255\255\030\001\255\255\255\255\
\018\001\019\001\255\255\255\255\022\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\030\001\018\001\019\001\255\255\
\255\255\022\001\255\255\024\001\255\255\255\255\255\255\028\001\
\255\255\030\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\030\001\255\255\018\001\019\001\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\030\001\018\001\019\001\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\030\001\255\255\
\018\001\019\001\018\001\019\001\022\001\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\030\001\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\022\001\255\255\000\001\001\001\002\001\003\001\004\001\005\001\
\030\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\255\255\255\255\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\255\255\049\001\050\001\051\001\052\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\019\001\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\028\001\255\255\
\255\255\031\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\255\255\031\001\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\028\001\255\255\
\030\001\031\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\030\001\031\001\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\024\001\255\255\255\255\255\255\028\001\255\255\
\255\255\031\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\255\255\028\001\255\255\255\255\031\001\032\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\031\001\032\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  AND\000\
  OR\000\
  XOR\000\
  FISZERO\000\
  FLESS\000\
  FISPOS\000\
  FISNEG\000\
  FNEG\000\
  FABS\000\
  FHALF\000\
  FSQR\000\
  FLOOR\000\
  FLOATOFINT\000\
  INTOFFLOAT\000\
  SQRT\000\
  COS\000\
  SIN\000\
  TAN\000\
  ATAN\000\
  READINT\000\
  READFLOAT\000\
  PRINTCHAR\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
    ( _2 )
# 816 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Unit )
# 822 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 158 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Bool(_1) )
# 829 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 160 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Int(_1) )
# 836 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 162 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(_1) )
# 843 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 164 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Var(_1) )
# 850 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 166 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Get(_1, _4) )
# 858 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 170 "parser.mly"
    ( _1 )
# 865 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 173 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(_2) )
# 872 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 176 "parser.mly"
    ( let (ln, e) = _2 in match e with
    | Float(f) -> ln, Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> ln, Neg(_2) )
# 881 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 180 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Add(_1, _3) )
# 889 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 182 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Sub(_1, _3) )
# 897 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 184 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Eq(_1, _3) )
# 905 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 186 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(let start = Parsing.symbol_start_pos () in start.pos_lnum, Eq(_1, _3)) )
# 913 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 188 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_3, _1)) )
# 921 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 190 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_1, _3)) )
# 929 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 192 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_1, _3) )
# 937 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 194 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_3, _1) )
# 945 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 197 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, If(_2, _4, _6) )
# 954 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 200 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FNeg(_2) )
# 961 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 202 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FAdd(_1, _3) )
# 969 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 204 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FSub(_1, _3) )
# 977 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 206 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FMul(_1, _3) )
# 985 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 208 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FDiv(_1, _3) )
# 993 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 210 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, And(_1, _3) )
# 1001 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 212 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Or(_1, _3) )
# 1009 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 215 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, xor _2 _3 )
# 1017 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 218 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FEq(_2, (let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.))) )
# 1024 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 221 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FLT(_2, _3) )
# 1032 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 224 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FLT((let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.)), _2) )
# 1039 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 227 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FLT(_2, (let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.))) )
# 1046 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 230 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FNeg(_2) )
# 1053 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 232 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FMul(_2, (let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.5))) )
# 1060 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 235 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FMul(_2,_2) )
# 1067 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 237 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FAbs(_2) )
# 1074 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 239 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FFloor(_2) )
# 1081 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 241 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, ItoF(_2) )
# 1088 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 243 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FtoI(_2) )
# 1095 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 245 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FSqrt(_2) )
# 1102 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 247 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, snd(cos _2) )
# 1109 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 249 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, snd(sin _2) )
# 1116 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 251 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, snd(atan _2) )
# 1123 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 253 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Read )
# 1130 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 255 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FRead )
# 1137 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 257 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Write(_2) )
# 1144 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 260 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Let(addtyp _2, _4, _6) )
# 1153 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 263 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LetRec(_3, _5) )
# 1161 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 266 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, App(_1, _2) )
# 1169 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 269 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Tuple(_1) )
# 1176 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 271 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LetTuple(_3, _6, _8) )
# 1185 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 273 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Put(_1, _4, _7) )
# 1194 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 275 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 1202 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 278 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Array(_2, _3) )
# 1210 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "parser.mly"
    ( failwith
    (let start_pos = Parsing.symbol_start_pos () in
        let end_pos = Parsing.symbol_end_pos () in
            Printf.sprintf "parse error (line: %d column: %d - line: %d column: %d)"
           (let start = Parsing.symbol_start_pos () in start.pos_lnum)
           (start_pos.pos_cnum - start_pos.pos_bol)
           (end_pos.pos_lnum)
           (end_pos.pos_cnum - end_pos.pos_bol)) )
# 1223 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 291 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 1232 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 295 "parser.mly"
    ( addtyp _1 :: _2 )
# 1240 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 297 "parser.mly"
    ( [addtyp _1] )
# 1247 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 302 "parser.mly"
    ( _1 @ [_2] )
# 1255 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 305 "parser.mly"
    ( [_1] )
# 1262 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 309 "parser.mly"
    ( _1 @ [_3] )
# 1270 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 311 "parser.mly"
    ( [_1; _3] )
# 1278 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 315 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1286 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 317 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1294 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
