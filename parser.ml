type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | XOR
  | FISZERO
  | FLESS
  | FISPOS
  | FISNEG
  | FNEG
  | FABS
  | FHALF
  | FSQR
  | FLOOR
  | FLOATOFINT
  | INTOFFLOAT
  | SQRT
  | COS
  | SIN
  | TAN
  | ATAN
  | READINT
  | READFLOAT
  | PRINTCHAR

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())

let start_pos = Parsing.symbol_start_pos ()
let letfloat x e1 e2 = 0,Let((x, Type.Int), e1, e2)
let letint x e1 e2 = 0,Let((x, Type.Int), e1,e2)
let (&!) e n = 0,AndI(e,n)
let var x = 0,Var x
let int n = 0,Int n
let float f = 0,Float f
let ftoi e = 0,FtoI e
let itof e = 0,ItoF e
let (+!) e1 e2 = 0,FAdd(e1,e2)
let (-!) e1 e2 = 0,FSub(e1,e2)
let ( *!) e1 e2 = 0,FMul(e1,e2)
let (/!) e1 e2 = 0,FDiv(e1,e2) 

let start = Parsing.symbol_start_pos ()

let cos e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t2" (var "xx" /! float 2.) @@
  letfloat "t4" (var "t2" *! var "xx" /! float 12.) @@
  letfloat "t6" (var "t4" *! var "xx" /! float 30.) @@
  letfloat "t8" (var "t6" *! var "xx" /! float 56.) @@
  letfloat "t10" (var "t8" *! var "xx" /! float 90.) @@
  float 1. -! var "t2" +! var "t4" -! var "t6" +! var "t8" -! var "t10"

let pi = float 3.1415927

let sin e =
  letfloat "x" e @@
  letint "n" (ftoi (var "x" /! pi)) @@
  
    cos (var "x" -! itof (var "n") *! pi -! pi /! float 2.)

let tan e =
  letfloat "x" e @@
  letfloat "xx" (var "x" *! var "x") @@
  letfloat "t3" (var "x" *! var "xx" /! float 3.) @@
  letfloat "t5" (var "t3" *! var "xx" *! (float 2. /! float 5.)) @@
  letfloat "t7" (var "t5" *! var "xx" *! (float 17. /! float 42.)) @@
  letfloat "t9" (var "t7" *! var "xx" *! (float 62. /! float 153.)) @@
  var "x" +! var "t3" +! var "t5" +! var "t7" +! var "t9"

let atan e =
  letfloat "x" e @@
  letfloat "t1" ((var "x" -! float 2.) /! float 5.) @@
  letfloat "t2" ((var "t1" *! var "t1" *! float 2.)) @@
  letfloat "t3" ((var "t2" *! var "t1" *! (float 11. /! float 6.))) @@
  letfloat "t4" ((var "t3" *! var "t1" *! (float 18. /! float 11.))) @@
  letfloat "t5" ((var "t4" *! var "t1" *! (float 41. /! float 30.))) @@
  float 1.10714872 +! var "t1" -! var "t2" +! var "t3" -! var "t4" +! var "t5"

# 114 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MINUS_DOT *);
  264 (* PLUS_DOT *);
  265 (* AST_DOT *);
  266 (* SLASH_DOT *);
  267 (* EQUAL *);
  268 (* LESS_GREATER *);
  269 (* LESS_EQUAL *);
  270 (* GREATER_EQUAL *);
  271 (* LESS *);
  272 (* GREATER *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
  279 (* REC *);
  280 (* COMMA *);
  281 (* ARRAY_CREATE *);
  282 (* DOT *);
  283 (* LESS_MINUS *);
  284 (* SEMICOLON *);
  285 (* LPAREN *);
  286 (* RPAREN *);
    0 (* EOF *);
  287 (* XOR *);
  288 (* FISZERO *);
  289 (* FLESS *);
  290 (* FISPOS *);
  291 (* FISNEG *);
  292 (* FNEG *);
  293 (* FABS *);
  294 (* FHALF *);
  295 (* FSQR *);
  296 (* FLOOR *);
  297 (* FLOATOFINT *);
  298 (* INTOFFLOAT *);
  299 (* SQRT *);
  300 (* COS *);
  301 (* SIN *);
  302 (* TAN *);
  303 (* ATAN *);
  304 (* READINT *);
  305 (* READFLOAT *);
  306 (* PRINTCHAR *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  276 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\007\000\007\000\004\000\
\004\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\002\000\003\000\003\000\003\000\003\000\
\003\000\002\000\003\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\006\000\005\000\002\000\001\000\008\000\
\007\000\003\000\003\000\001\000\004\000\002\000\001\000\002\000\
\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\052\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\061\000\
\060\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\034\000\035\000\088\000\082\000\036\000\090\000\116\000"

let yysindex = "\255\255\
\119\002\000\000\000\000\000\000\000\000\000\000\031\255\031\255\
\031\255\119\002\000\000\017\255\031\255\068\002\031\255\031\255\
\031\255\031\255\031\255\031\255\031\255\031\255\031\255\031\255\
\031\255\031\255\031\255\031\255\031\255\031\255\031\255\031\255\
\031\255\030\255\001\255\237\254\250\254\250\254\250\254\011\255\
\015\255\008\255\036\255\021\255\000\000\025\255\021\255\250\254\
\021\255\250\254\250\254\250\254\250\254\250\254\250\254\250\254\
\250\254\250\254\250\254\250\254\250\254\250\254\250\254\250\254\
\250\254\119\002\119\002\031\255\031\255\031\255\031\255\031\255\
\031\255\031\255\031\255\031\255\031\255\031\255\031\255\016\255\
\250\254\031\255\119\002\032\255\119\002\119\002\050\255\052\255\
\048\255\251\254\250\254\000\000\250\254\250\254\000\000\030\255\
\250\254\250\254\250\254\250\254\250\254\250\254\250\254\250\254\
\250\254\250\254\250\254\250\254\119\002\250\254\000\000\119\002\
\024\255\014\255\050\255\064\255\119\002\056\255\057\255\068\255\
\035\255\038\255\119\002\119\002\000\000\119\002\030\255\000\000\
\000\000\119\002\053\255\000\000\058\255\030\255\030\255\045\255\
\119\002\119\002\058\255\030\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\057\000\105\001\064\000\071\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\085\000\
\000\000\092\000\099\000\106\000\113\000\120\000\127\000\134\000\
\141\000\148\000\155\000\162\000\169\000\176\000\183\000\190\000\
\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\204\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\211\000\000\000\218\000\225\000\000\000\018\000\
\232\000\239\000\246\000\253\000\018\001\035\001\042\001\056\001\
\069\001\084\001\091\001\098\001\000\000\044\000\000\000\000\000\
\000\000\000\000\072\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\001\000\000\
\000\000\000\000\001\000\000\000\112\001\133\001\062\255\000\000\
\000\000\000\000\119\001\140\001"

let yygindex = "\000\000\
\115\002\241\002\000\000\000\000\000\000\000\000\227\255"

let yytablesize = 937
let yytable = "\001\000\
\007\000\004\000\005\000\006\000\083\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\050\000\119\000\084\000\011\000\004\000\005\000\006\000\
\120\000\086\000\080\000\087\000\085\000\014\000\057\000\004\000\
\005\000\006\000\066\000\124\000\041\000\066\000\067\000\042\000\
\011\000\067\000\123\000\056\000\109\000\043\000\084\000\066\000\
\066\000\014\000\011\000\067\000\067\000\066\000\092\000\089\000\
\008\000\067\000\066\000\014\000\112\000\066\000\067\000\009\000\
\131\000\067\000\138\000\132\000\066\000\115\000\010\000\118\000\
\067\000\117\000\126\000\128\000\129\000\020\000\130\000\137\000\
\062\000\066\000\055\000\053\000\026\000\125\000\000\000\000\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\023\000\007\000\007\000\007\000\000\000\007\000\000\000\
\007\000\000\000\007\000\000\000\007\000\007\000\007\000\057\000\
\057\000\057\000\024\000\050\000\050\000\000\000\000\000\050\000\
\000\000\013\000\000\000\000\000\056\000\056\000\056\000\050\000\
\057\000\057\000\057\000\000\000\057\000\000\000\057\000\014\000\
\000\000\000\000\057\000\057\000\057\000\056\000\056\000\056\000\
\000\000\056\000\000\000\056\000\017\000\000\000\000\000\056\000\
\056\000\056\000\008\000\008\000\000\000\000\000\008\000\000\000\
\008\000\009\000\009\000\018\000\008\000\009\000\008\000\009\000\
\010\000\010\000\015\000\009\000\010\000\009\000\010\000\020\000\
\020\000\016\000\010\000\020\000\010\000\020\000\026\000\026\000\
\047\000\020\000\026\000\020\000\026\000\028\000\028\000\019\000\
\026\000\028\000\026\000\028\000\029\000\029\000\049\000\028\000\
\029\000\028\000\029\000\030\000\030\000\045\000\029\000\030\000\
\029\000\030\000\033\000\033\000\044\000\030\000\033\000\030\000\
\033\000\031\000\031\000\048\000\033\000\031\000\033\000\031\000\
\032\000\032\000\000\000\031\000\032\000\031\000\032\000\034\000\
\034\000\000\000\032\000\034\000\032\000\034\000\035\000\035\000\
\000\000\034\000\035\000\034\000\035\000\036\000\036\000\000\000\
\035\000\036\000\035\000\036\000\037\000\037\000\000\000\036\000\
\037\000\036\000\037\000\038\000\038\000\000\000\037\000\038\000\
\037\000\038\000\039\000\039\000\000\000\038\000\039\000\038\000\
\039\000\040\000\040\000\000\000\039\000\040\000\039\000\040\000\
\041\000\041\000\000\000\040\000\041\000\040\000\041\000\042\000\
\042\000\000\000\041\000\042\000\041\000\042\000\043\000\043\000\
\000\000\042\000\043\000\042\000\043\000\046\000\046\000\000\000\
\043\000\046\000\043\000\046\000\051\000\051\000\000\000\046\000\
\051\000\046\000\051\000\025\000\025\000\000\000\051\000\025\000\
\051\000\025\000\027\000\027\000\000\000\025\000\027\000\025\000\
\027\000\012\000\012\000\000\000\027\000\012\000\027\000\012\000\
\011\000\011\000\000\000\012\000\011\000\012\000\011\000\022\000\
\022\000\000\000\011\000\022\000\011\000\022\000\021\000\021\000\
\000\000\022\000\021\000\022\000\021\000\000\000\000\000\000\000\
\021\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\023\000\000\000\000\000\023\000\
\000\000\023\000\000\000\000\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\000\000\024\000\024\000\000\000\000\000\
\024\000\000\000\024\000\013\000\013\000\000\000\024\000\013\000\
\024\000\013\000\000\000\000\000\000\000\013\000\000\000\013\000\
\000\000\014\000\014\000\000\000\000\000\014\000\000\000\014\000\
\000\000\000\000\000\000\014\000\000\000\014\000\017\000\017\000\
\000\000\000\000\017\000\000\000\017\000\000\000\000\000\000\000\
\017\000\000\000\017\000\000\000\000\000\018\000\018\000\000\000\
\000\000\018\000\000\000\018\000\015\000\015\000\000\000\018\000\
\015\000\018\000\015\000\016\000\016\000\000\000\015\000\016\000\
\015\000\016\000\047\000\047\000\040\000\016\000\047\000\016\000\
\046\000\019\000\019\000\000\000\047\000\019\000\047\000\000\000\
\049\000\049\000\000\000\019\000\049\000\019\000\000\000\045\000\
\045\000\000\000\049\000\045\000\049\000\000\000\044\000\044\000\
\000\000\000\000\044\000\045\000\000\000\048\000\048\000\000\000\
\000\000\048\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\095\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\111\000\000\000\113\000\
\114\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\121\000\
\000\000\000\000\122\000\000\000\000\000\000\000\000\000\127\000\
\000\000\000\000\000\000\000\000\000\000\133\000\134\000\000\000\
\135\000\000\000\000\000\000\000\136\000\000\000\000\000\037\000\
\038\000\039\000\000\000\139\000\140\000\044\000\000\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\000\000\081\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\091\000\000\000\000\000\093\000\
\000\000\094\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\000\000\000\000\110\000\003\000\004\000\005\000\006\000\007\000\
\008\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\011\000\
\012\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\014\000\045\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\000\000\030\000\031\000\032\000\033\000\003\000\004\000\
\005\000\006\000\007\000\008\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\011\000\012\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\000\000\030\000\031\000\032\000\
\033\000"

let yycheck = "\001\000\
\000\000\001\001\002\001\003\001\024\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\000\000\024\001\026\001\020\001\001\001\002\001\003\001\
\030\001\011\001\026\001\020\001\018\001\029\001\000\000\001\001\
\002\001\003\001\024\001\022\001\020\001\024\001\028\001\023\001\
\020\001\028\001\019\001\000\000\029\001\029\001\026\001\024\001\
\024\001\029\001\020\001\028\001\028\001\024\001\030\001\020\001\
\000\000\028\001\024\001\029\001\029\001\024\001\028\001\000\000\
\030\001\028\001\022\001\030\001\024\001\020\001\000\000\024\001\
\028\001\022\001\011\001\020\001\020\001\000\000\011\001\027\001\
\000\000\024\001\011\001\022\001\000\000\115\000\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\000\000\018\001\019\001\020\001\255\255\022\001\255\255\
\024\001\255\255\026\001\255\255\028\001\029\001\030\001\001\001\
\002\001\003\001\000\000\018\001\019\001\255\255\255\255\022\001\
\255\255\000\000\255\255\255\255\001\001\002\001\003\001\030\001\
\018\001\019\001\020\001\255\255\022\001\255\255\024\001\000\000\
\255\255\255\255\028\001\029\001\030\001\018\001\019\001\020\001\
\255\255\022\001\255\255\024\001\000\000\255\255\255\255\028\001\
\029\001\030\001\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\018\001\019\001\000\000\028\001\022\001\030\001\024\001\
\018\001\019\001\000\000\028\001\022\001\030\001\024\001\018\001\
\019\001\000\000\028\001\022\001\030\001\024\001\018\001\019\001\
\000\000\028\001\022\001\030\001\024\001\018\001\019\001\000\000\
\028\001\022\001\030\001\024\001\018\001\019\001\000\000\028\001\
\022\001\030\001\024\001\018\001\019\001\000\000\028\001\022\001\
\030\001\024\001\018\001\019\001\000\000\028\001\022\001\030\001\
\024\001\018\001\019\001\000\000\028\001\022\001\030\001\024\001\
\018\001\019\001\255\255\028\001\022\001\030\001\024\001\018\001\
\019\001\255\255\028\001\022\001\030\001\024\001\018\001\019\001\
\255\255\028\001\022\001\030\001\024\001\018\001\019\001\255\255\
\028\001\022\001\030\001\024\001\018\001\019\001\255\255\028\001\
\022\001\030\001\024\001\018\001\019\001\255\255\028\001\022\001\
\030\001\024\001\018\001\019\001\255\255\028\001\022\001\030\001\
\024\001\018\001\019\001\255\255\028\001\022\001\030\001\024\001\
\018\001\019\001\255\255\028\001\022\001\030\001\024\001\018\001\
\019\001\255\255\028\001\022\001\030\001\024\001\018\001\019\001\
\255\255\028\001\022\001\030\001\024\001\018\001\019\001\255\255\
\028\001\022\001\030\001\024\001\018\001\019\001\255\255\028\001\
\022\001\030\001\024\001\018\001\019\001\255\255\028\001\022\001\
\030\001\024\001\018\001\019\001\255\255\028\001\022\001\030\001\
\024\001\018\001\019\001\255\255\028\001\022\001\030\001\024\001\
\018\001\019\001\255\255\028\001\022\001\030\001\024\001\018\001\
\019\001\255\255\028\001\022\001\030\001\024\001\018\001\019\001\
\255\255\028\001\022\001\030\001\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\022\001\255\255\024\001\018\001\019\001\255\255\028\001\022\001\
\030\001\024\001\255\255\255\255\255\255\028\001\255\255\030\001\
\255\255\018\001\019\001\255\255\255\255\022\001\255\255\024\001\
\255\255\255\255\255\255\028\001\255\255\030\001\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\030\001\255\255\255\255\018\001\019\001\255\255\
\255\255\022\001\255\255\024\001\018\001\019\001\255\255\028\001\
\022\001\030\001\024\001\018\001\019\001\255\255\028\001\022\001\
\030\001\024\001\018\001\019\001\010\000\028\001\022\001\030\001\
\014\000\018\001\019\001\255\255\028\001\022\001\030\001\255\255\
\018\001\019\001\255\255\028\001\022\001\030\001\255\255\018\001\
\019\001\255\255\028\001\022\001\030\001\255\255\018\001\019\001\
\255\255\255\255\022\001\030\001\255\255\018\001\019\001\255\255\
\255\255\022\001\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\066\000\067\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\083\000\255\255\085\000\
\086\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\109\000\
\255\255\255\255\112\000\255\255\255\255\255\255\255\255\117\000\
\255\255\255\255\255\255\255\255\255\255\123\000\124\000\255\255\
\126\000\255\255\255\255\255\255\130\000\255\255\255\255\007\000\
\008\000\009\000\255\255\137\000\138\000\013\000\255\255\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\255\255\035\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\044\000\255\255\255\255\047\000\
\255\255\049\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\255\255\255\255\082\000\000\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\047\001\048\001\049\001\050\001\000\001\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\255\255\255\255\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\047\001\048\001\049\001\
\050\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  XOR\000\
  FISZERO\000\
  FLESS\000\
  FISPOS\000\
  FISNEG\000\
  FNEG\000\
  FABS\000\
  FHALF\000\
  FSQR\000\
  FLOOR\000\
  FLOATOFINT\000\
  INTOFFLOAT\000\
  SQRT\000\
  COS\000\
  SIN\000\
  TAN\000\
  ATAN\000\
  READINT\000\
  READFLOAT\000\
  PRINTCHAR\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( _2 )
# 563 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Unit )
# 569 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 125 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Bool(_1) )
# 576 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 127 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Int(_1) )
# 583 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 129 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(_1) )
# 590 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 131 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Var(_1) )
# 597 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Get(_1, _4) )
# 605 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 137 "parser.mly"
    ( _1 )
# 612 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 140 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(_2) )
# 619 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 143 "parser.mly"
    ( let (ln, e) = _2 in match e with
    | Float(f) -> ln, Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> ln, Neg(_2) )
# 628 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 147 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Add(_1, _3) )
# 636 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 149 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Sub(_1, _3) )
# 644 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 151 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Eq(_1, _3) )
# 652 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 153 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(let start = Parsing.symbol_start_pos () in start.pos_lnum, Eq(_1, _3)) )
# 660 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 155 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_3, _1)) )
# 668 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 157 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Not(let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_1, _3)) )
# 676 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 159 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_1, _3) )
# 684 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 161 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LE(_3, _1) )
# 692 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 164 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, If(_2, _4, _6) )
# 701 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 167 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FNeg(_2) )
# 708 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 169 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FAdd(_1, _3) )
# 716 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 171 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FSub(_1, _3) )
# 724 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 173 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FMul(_1, _3) )
# 732 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 175 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FDiv(_1, _3) )
# 740 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 178 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Xor(_2,_3) )
# 748 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 181 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FEq(_2, (let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.))) )
# 755 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 184 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FLE(_2, _3) )
# 763 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 187 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FLE((let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.)), _2) )
# 770 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 190 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FLE(_2, (let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.))) )
# 777 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 193 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FNeg(_2) )
# 784 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 195 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FMul(_2, (let start = Parsing.symbol_start_pos () in start.pos_lnum, Float(0.5))) )
# 791 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 198 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FSqr(_2) )
# 798 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 200 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FAbs(_2) )
# 805 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 202 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FFloor(_2) )
# 812 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 204 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, ItoF(_2) )
# 819 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 206 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FtoI(_2) )
# 826 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 208 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FSqrt(_2) )
# 833 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 210 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, snd(cos _2) )
# 840 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 212 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, snd(sin _2) )
# 847 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 214 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, snd(atan _2) )
# 854 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 216 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Read )
# 861 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 218 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, FRead )
# 868 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 220 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Write(_2) )
# 875 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 223 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Let(addtyp _2, _4, _6) )
# 884 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 226 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LetRec(_3, _5) )
# 892 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 229 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, App(_1, _2) )
# 900 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 232 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Tuple(_1) )
# 907 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 234 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, LetTuple(_3, _6, _8) )
# 916 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 236 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Put(_1, _4, _7) )
# 925 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 238 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 933 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 241 "parser.mly"
    ( let start = Parsing.symbol_start_pos () in start.pos_lnum, Array(_2, _3) )
# 941 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "parser.mly"
    ( failwith
    (let start_pos = Parsing.symbol_start_pos () in
        let end_pos = Parsing.symbol_end_pos () in
            Printf.sprintf "parse error (line: %d column: %d - line: %d column: %d)"
           (let start = Parsing.symbol_start_pos () in start.pos_lnum)
           (start_pos.pos_cnum - start_pos.pos_bol)
           (end_pos.pos_lnum)
           (end_pos.pos_cnum - end_pos.pos_bol)) )
# 954 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 254 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 963 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 258 "parser.mly"
    ( addtyp _1 :: _2 )
# 971 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 260 "parser.mly"
    ( [addtyp _1] )
# 978 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 265 "parser.mly"
    ( _1 @ [_2] )
# 986 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 268 "parser.mly"
    ( [_1] )
# 993 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 272 "parser.mly"
    ( _1 @ [_3] )
# 1001 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 274 "parser.mly"
    ( [_1; _3] )
# 1009 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 278 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1017 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 280 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1025 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
